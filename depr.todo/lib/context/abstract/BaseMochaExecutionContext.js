/**
 * @file Defines the BaseMochaExecutionContext class.
 *
 * @author Luke Chavers <luke@c2cschools.com>
 * @author Kevin Sanders <kevin@c2cschools.com>
 * @since 5.0.0
 * @license See LICENSE.md for details about licensing.
 * @copyright 2017 C2C Schools, LLC
 */

"use strict";

// Important Note
// --------------
// This module only loads a single dependency, directly, which is the
// parent class for the class defined within. This is intended to force
// dependency loading through the parent class, by way of the `$dep()`
// method, in order to centralize dependency definition and loading.

const BaseLocalExecutionContext = require( "./BaseLocalExecutionContext" );

/**
 * Represents an execution context whereby an endpoint is executed
 * in the local environment by way of Mocha.
 *
 * @abstract
 * @memberOf ExecutionContext.Abstract
 * @extends ExecutionContext.BaseLocalExecutionContext
 */
class BaseMochaExecutionContext extends BaseLocalExecutionContext {

	/**
	 * @inheritDoc
	 */
	_initialize( cfg ) {

		const me = this;

		// Call parent
		super._initialize( cfg );

		// Dev flags...
		me.useDevelopmentToken = true;
	}

	/**
	 * The api key being used for the current request. This getter overrides
	 * the default behavior by forcing the api key (which is not typically
	 * available in this execution context) to a static string
	 * ("mocha-development-no-key").
	 *
	 * @public
	 * @readonly
	 * @type {string}
	 */
	get apiKey() {

		const me = this;

		return me.getContextValue(
			[ "apiKey" ],
			"mocha-development-no-key" // <-- default
		);
	}

	// noinspection JSMethodCanBeStatic
	/**
	 * The ip address of the requesting client. This getter overrides the
	 * default behavior by returning "127.0.0.1" (localhost) as the ip address.
	 *
	 * @public
	 * @readonly
	 * @type {string}
	 */
	get clientIp() {

		return "127.0.0.1";
	}

	/**
	 * Generates a fake requestId that is prefixed with four 2's.
	 *
	 * @private
	 * @returns {string} A fake request ID.
	 */
	_createFakeRequestId() {

		const me = this;

		// Although we want to generate a valid requestId (for realism),
		// we're going to set the first block of characters to something
		// that identifies the UUID as being unusual and, further, as
		// being generated by this line of execution contexts.

		// Dependencies
		const uuidUtils = me.$dep( "util/uuid" );

		return uuidUtils.generate( "2222" );
	}

	/*
	prepareEndpoint() {

		const me = this;

		// Call Parent
		super.prepareEndpoint();

		// Disable log output
		// todo: need to think about this...
		//me.endpoint.logger._config.shared.outputToConsole = false;

	}
	*/

	// noinspection JSMethodCanBeStatic, JSUnusedGlobalSymbols
	/**
	 * Overrides the default behavior by changing how the response object
	 * is serialized.
	 *
	 * @private
	 * @param {Response.BaseResponse} response - The unformatted response.
	 * @returns {Object} The formatted response.
	 */
	_formatResponse( response ) {

		// In Mocha, we'll want the body as an object (rather than
		// as a string, which is the default behavior) because it
		// is easier to evaluate and validate.

		return response.toPlainObject( "body" );
	}

	/**
	 * Create a configuration object, suitable for this execution context,
	 * to be used when instantiating a new logger object.
	 *
	 * This method overrides the default behavior by completely disabling
	 * log output.
	 *
	 * @private
	 * @param {Object} [loggerConfigOverrides] - Optional overrides for the
	 *     context's default logger configuration.
	 * @returns {Object} A plain configuration object to be passed to
	 *     the constructor of new Logger objects.
	 */
	_createLoggerConfig( loggerConfigOverrides ) {

		// Mocha should produce its own error/status output,
		// and we shouldn't need any output from the endpoint.
		// So, we're going to disable log output entirely.

		if ( loggerConfigOverrides.minLogLevel === undefined ) {

			loggerConfigOverrides.minLogLevel = -1;
		}

		// But since the user might turn it back on, we'll
		// go ahead and tell the logger to output in
		// a human-readable format.

		if ( loggerConfigOverrides.linear === undefined ) {

			loggerConfigOverrides.linear = true;
		}

		return super._createLoggerConfig( loggerConfigOverrides );
	}
}

module.exports = BaseMochaExecutionContext;

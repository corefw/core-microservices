/**
 * @file Defines the MochaCiExecutionContext class.
 *
 * @author Luke Chavers <luke@c2cschools.com>
 * @author Kevin Sanders <kevin@c2cschools.com>
 * @since 5.0.0
 * @license See LICENSE.md for details about licensing.
 * @copyright 2017 C2C Schools, LLC
 */

"use strict";

// Important Note
// --------------
// This module only loads a single dependency, directly, which is the
// parent class for the class defined within. This is intended to force
// dependency loading through the parent class, by way of the `$dep()`
// method, in order to centralize dependency definition and loading.

const BaseMochaExecutionContext	= require(
	"./abstract/BaseMochaExecutionContext"
);

const ERRORS = require( "../errors" );

/**
 * Represents an execution context whereby an endpoint is executed
 * in the local environment (of a CI server) by way of Mocha.
 *
 * @memberOf ExecutionContext
 * @extends ExecutionContext.BaseMochaExecutionContext
 */
class MochaCiExecutionContext extends BaseMochaExecutionContext {

	/**
	 * The name of the current "API Stage" (e.g. "v5", "v5-dev", etc). This
	 * getter extends the default behavior by resolving special stage names
	 * that apply within this execution context (or child contexts).
	 *
	 * @public
	 * @readonly
	 * @type {?string}
	 */
	get apiStage() {

		const me = this;

		// Dependencies
		// const ERRORS = me.$dep( "errors" );

		if ( process.env.API_STAGE !== undefined ) {

			return process.env.API_STAGE;

		} else if ( process.env.TRAVIS_BRANCH === undefined ) {

			throw new ERRORS.ContextDataResolutionError(
				"Couldn't find the TRAVIS_BRANCH environment variable, which " +
				"is needed for apiStage resolution in MochaCiExecutionContext."
			);

		} else if ( process.env.TRAVIS_BRANCH === "develop" ) {

			return "dev";

		} else {

			return process.env.TRAVIS_BRANCH;
		}
	}

	/**
	 * Generates a fake requestId that is prefixed with four 5's.
	 *
	 * @private
	 * @returns {string} A fake request ID.
	 */
	_createFakeRequestId() {

		const me = this;

		// Although we want to generate a valid requestId (for realism),
		// we're going to set the first block of characters to something
		// that identifies the UUID as being unusual and, further, as
		// being generated by this line of execution contexts.

		// Dependencies
		const uuidUtils = me.$dep( "util/uuid" );

		return uuidUtils.generate( "5555" );
	}
}

module.exports = MochaCiExecutionContext;

/* eslint-disable no-console */
/**
 * @file Defines the MochaDevelopmentExecutionContext class.
 *
 * @author Luke Chavers <luke@c2cschools.com>
 * @author Kevin Sanders <kevin@c2cschools.com>
 * @since 5.0.0
 * @license See LICENSE.md for details about licensing.
 * @copyright 2017 C2C Schools, LLC
 */

"use strict";

// Important Note
// --------------
// This module only loads a single dependency, directly, which is the
// parent class for the class defined within. This is intended to force
// dependency loading through the parent class, by way of the `$dep()`
// method, in order to centralize dependency definition and loading.

const BaseMochaExecutionContext = require(
	"./abstract/BaseMochaExecutionContext"
);

/**
 * Represents an execution context whereby an endpoint is executed
 * in the local environment by way of Mocha during development (BDD).
 *
 * @memberOf ExecutionContext
 * @extends ExecutionContext.BaseMochaExecutionContext
 */
class MochaDevelopmentExecutionContext extends BaseMochaExecutionContext {

	// noinspection JSUnusedGlobalSymbols
	/**
	 * Called whenever the endpoint execution operation fails. This method
	 * overrides the default behavior by showing a stack trace whenever an
	 * error is thrown.
	 *
	 * @private
	 * @param {error} err - An error object (usually one that stems from
	 *     {@link Errors.BaseError} ).
	 * @returns {Promise} resolved with a {@link Response.ErrorResponse} object.
	 */
	_fail( err ) {

		// In local Mocha/BDD development, it is useful to see
		// the stacktrace whenever an error occurs.
		console.log( "\n \n \n " );
		console.log( "Error Stack (Output from MochaDevelopmentExecutionContext.js):" );
		console.log( "\n " );
		console.log( err.stack );
		console.log( "\n \n \n " );

		// Pass through
		return super._fail( err );
	}

	// noinspection JSMethodCanBeStatic
	/**
	 * The name of the current "API Stage" (e.g. "v5", "v5-dev", etc). This
	 * getter overrides the default behavior by returning a static string
	 * ("mochaDev").
	 *
	 * @public
	 * @readonly
	 * @type {string}
	 */
	get apiStage() {

		// Mocha won't have the usual 'Api Stage' information,
		// so we'll force a value for it.

		// FIXME: This breaks local vs CI testing because the stage is used
		// to build the error URL in ErrorResponse.js

		return "mochaDev";
	}

	/**
	 * Generates a fake requestId that is prefixed with four 4's.
	 *
	 * @private
	 * @returns {string} A fake request ID.
	 */
	_createFakeRequestId() {

		const me = this;

		// Although we want to generate a valid requestId (for realism),
		// we're going to set the first block of characters to something
		// that identifies the UUID as being unusual and, further, as
		// being generated by this line of execution contexts.

		// Dependencies
		const uuidUtils = me.$dep( "util/uuid" );

		return uuidUtils.generate( "4444" );
	}
}

module.exports = MochaDevelopmentExecutionContext;

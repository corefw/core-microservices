/**
 * @file Defines the ServerlessOfflineExecutionContext class.
 *
 * @author Luke Chavers <luke@c2cschools.com>
 * @author Kevin Sanders <kevin@c2cschools.com>
 * @since 5.0.0
 * @license See LICENSE.md for details about licensing.
 * @copyright 2017 C2C Schools, LLC
 */

"use strict";

// Important Note
// --------------
// This module only loads a single dependency, directly, which is the
// parent class for the class defined within. This is intended to force
// dependency loading through the parent class, by way of the `$dep()`
// method, in order to centralize dependency definition and loading.

const BaseHttpExecutionContext = require(
	"./abstract/BaseHttpExecutionContext"
);

/**
 * Represents an execution context whereby an endpoint is executed
 * in the local environment via the 'serverless-offline' plugin.
 *
 * @memberOf ExecutionContext
 * @extends ExecutionContext.BaseHttpExecutionContext
 */
class ServerlessOfflineExecutionContext extends BaseHttpExecutionContext {

	/**
	 * @inheritDoc
	 */
	initialize( cfg ) {

		const me = this;

		// Call parent
		super.initialize( cfg );

		// Dev flags...
		me.useDevelopmentToken = true;
	}

	/**
	 * Generates a fake requestId that is prefixed with four 3's.
	 *
	 * @private
	 * @returns {string} A fake request ID.
	 */
	_createFakeRequestId() {

		const me = this;

		// Although we want to generate a valid requestId (for realism),
		// we're going to set the first block of characters to something
		// that identifies the UUID as being unusual and, further, as
		// being generated by this line of execution contexts.

		// Dependencies
		const uuidUtils = me.$dep( "util/uuid" );

		return uuidUtils.generate( "3333" );
	}

	/**
	 * Create a configuration object, suitable for this execution context,
	 * to be used when instantiating a new logger object.
	 *
	 * This method overrides the default behavior by loosening the minimum
	 * logging level to include "DEBUG" level log events in the log output.
	 * It also sets the default log output mode to 'linear' (human readable).
	 *
	 * @private
	 * @param {Object} [loggerConfigOverrides] - Optional overrides for the
	 *     context's default logger configuration.
	 * @returns {Object} A plain configuration object to be passed to
	 *     the constructor of new Logger objects.
	 */
	_createLoggerConfig( loggerConfigOverrides ) {

		// Allow debug messages, but not "trace"
		if ( loggerConfigOverrides.minLogLevel === undefined ) {

			loggerConfigOverrides.minLogLevel = 7;
		}

		// Output in a human-readable format.
		if ( loggerConfigOverrides.linear === undefined ) {

			loggerConfigOverrides.linear = true;
		}

		return super._createLoggerConfig( loggerConfigOverrides );
	}
}

module.exports = ServerlessOfflineExecutionContext;

/**
 * Defines the SwaggerSpecGenerator class.
 *
 * @author Luke Chavers <luke@c2cschools.com>
 * @author Kevin Sanders <kevin@c2cschools.com>
 * @since 5.1.15
 * @license See LICENSE.md for details about licensing.
 * @copyright 2017 C2C Schools, LLC
 */

"use strict";

const BaseGenerator = require( "../util/BaseGenerator" );

/**
 * This class is used in the automatic generation of Serverless.yml
 * files for the services during deployment and other Serverless
 * Framework powered operations.
 *
 * @memberOf Serverless
 * @extends Util.BaseGenerator
 */
class ServerlessConfigGenerator extends BaseGenerator {

	// noinspection JSMethodCanBeStatic
	/**
	 * Defines a static mapping that this generator uses to create each part of
	 * the exported Serverless config. This variable/property is used,
	 * exclusively, by the `configExports` property.
	 *
	 * @see configExports
	 * @private
	 * @type {Object}
	 * @readonly
	 */
	get _configMethodMap() {

		return [
			{
				property   : "custom",
				methodName : "buildCustomConfig",
			},
			{
				property   : "package",
				methodName : "buildPackageConfig",
			},
			{
				property   : "plugins",
				methodName : "buildPluginConfig",
			},
			{
				property   : "provider",
				methodName : "buildProviderConfig",
			},
			{
				property   : "functions",
				methodName : "buildFunctionConfig",
			},
		];
	}

	/**
	 * The object that should be exported by implementing scripts in order to
	 * allow the Serverless Framework access to the configuration data generated
	 * by this generator.
	 *
	 * @example
	 *     ```
	 *     module.exports = configGenerator.configExports;
	 *     ```
	 *
	 * @see https://serverless.com/framework/docs/providers/aws/guide/variables/#reference-variables-in-javascript-files
	 * @public
	 * @type {Object}
	 * @readonly
	 */
	get configExports() {

		const me = this;

		// Dependencies
		const _ = me.$dep( "lodash" );

		let fnMap = me._configMethodMap;

		// Init Return
		let ret = {};

		// Create each export property
		_.each( fnMap, function ( mapping ) {

			ret[ mapping.property ] = me[ mapping.methodName ].bind( me );
		} );

		// Finished
		return ret;
	}

	/**
	 * A debugging function that can be used to dump the configuration data that
	 * is being generated by this config generator.
	 *
	 * @public
	 * @returns {void}
	 */
	dumpConfigExports() {

		const me = this;

		// Dependencies
		const _ = me.$dep( "lodash" );

		let resolvedConfig = {};

		// Create a "DebugHelper"...
		let deb = me.$spawn( "commonLib", "util/DebugHelper" );

		// Resolve all config data...
		_.each( me.configExports, function ( val, key ) {

			if ( _.isFunction( val ) ) {

				resolvedConfig[ key ] = val();

			} else {

				resolvedConfig[ key ] = val;
			}
		} );

		// Dump the config data
		deb.dbg( resolvedConfig, true, 1 );
	}

	/**
	 * A specialist method that generates the 'custom:' portion of the
	 * Serverless config (`serverless.yml`).
	 *
	 * This method will simply load a common Serverless config file
	 * (e.g. `serverless/config/default/custom.json`) and return it.
	 *
	 * Note: although, in theory, this type of 'common config loading' could be
	 * skipped using the `${file:...}` syntax that Serverless allows, the
	 * specific, absolute, path is not always known to Serverless. So, this
	 * generator allows the Node.js `require` function to assist in the
	 * resolution of paths...
	 *
	 * @public
	 * @returns {Object} The 'custom:' portion of the Serverless config.
	 */
	buildCustomConfig() {

		const me = this;

		return me._loadCommonConfigFile( "custom.json", "custom" );
	}

	/**
	 * A specialist method that generates the 'plugins:' portion of the
	 * Serverless config (`serverless.yml`).
	 *
	 * This method will simply load a common Serverless config file
	 * (e.g. `serverless/config/default/plugins.json`) and return it.
	 *
	 * See the note in {@link Serverless#buildCustomConfig} which also applies
	 * to this method.
	 *
	 * @public
	 * @returns {Object} The 'plugins:' portion of the Serverless config.
	 */
	buildPluginConfig() {

		const me = this;

		return me._loadCommonConfigFile( "plugins.json", "plugins" );
	}

	/**
	 * A specialist method that generates the 'package:' portion of the
	 * Serverless config (`serverless.yml`).
	 *
	 * This method will simply load a common Serverless config file
	 * (e.g. `serverless/config/default/package.json`) and return it.
	 *
	 * See the note in {@link Serverless#buildCustomConfig} which also applies
	 * to this method.
	 *
	 * @public
	 * @returns {Object} The 'package:' portion of the Serverless config.
	 */
	buildPackageConfig() {

		const me = this;

		return me._loadCommonConfigFile( "package.json", "package" );
	}

	/**
	 * A specialist method that generates the 'provider:' portion of the
	 * Serverless config (`serverless.yml`).
	 *
	 * This method will simply load a common Serverless config file
	 * (e.g. `serverless/config/default/provider.json`) and return it.
	 *
	 * See the note in {@link Serverless#buildCustomConfig} which also applies
	 * to this method.
	 *
	 * @public
	 * @returns {Object} The 'provider:' portion of the Serverless config.
	 */
	buildProviderConfig() {

		const me = this;

		return me._loadCommonConfigFile( "provider.json", "provider" );
	}

	/**
	 * A specialist method that generates the 'functions:' portion of the
	 * Serverless config (`serverless.yml`).
	 *
	 * This method will concatenate the function configuration data, defined
	 * in each endpoints `config/serverless-function.json` file, from
	 * all endpoints in the target service and return the resulting object.
	 *
	 * @public
	 * @returns {Object} The 'functions:' portion of the Serverless config.
	 */
	buildFunctionConfig() {

		const me = this;

		// Dependencies
		const _ = me.$dep( "lodash" );

		// Build information about all endpoints
		// in the target service...
		let eps = me.getServiceEndpoints();

		// Init the return object
		let ret = {};

		// Iterate over each endpoint and add its
		// function config to the return
		_.each( eps, function ( epData, epName ) {

			ret[ epName ] = epData.functionConfig;
		} );

		// All done
		return ret;
	}

	/**
	 * Creates a number of special variables that can be used in endpoint
	 * `serverless-function.json` configuration files.
	 *
	 * @protected
	 * @param {Object} vars - An object that is pre-populated with basic
	 *     endpoint details. This method will append this object with its
	 *     special variable by reference.
	 * @param {Object} epDetailsObj - Endpoint details object.
	 * @returns {Object} The `vars` object with new, special, variable appended.
	 */
	_createSpecialVariables( vars, epDetailsObj ) {

		const me = this;

		// Dependencies
		const _ = me.$dep( "lodash" );

		// Param validation
		if ( !_.isPlainObject( epDetailsObj ) ) {

			throw new Error(
				"Missing or invalid endpoint details object (epDetailsObj) " +
				"in ServerlessConfigGenerator#_createSpecialVariables()"
			);
		}

		// Add the special variable: ${endpointResponse}
		vars.endpointResponse = me._buildEndpointResponseTemplate();

		// Add the speciial variable: ${endpointRequestTemplate}
		vars.endpointRequestTemplate = me._buildEndpointRequestTemplate();

		// Add the special variable: ${endpointParameterTemplate}
		vars.endpointParameterTemplate =
			me._buildEndpointParameterTemplate( epDetailsObj );

		return vars;
	}

	/**
	 * This method builds an object that endpoints can use in their
	 * `serverless-function.json` config file via the `${endpointResponse}`
	 * variable identifier.
	 *
	 * Note: This method is a helper for, and is called exclusively by, the
	 * {@link Serverless#_createSpecialVariables} method.
	 *
	 * @private
	 * @returns {Object} The endpoint response template.
	 */
	_buildEndpointResponseTemplate() {

		const me = this;

		return me._loadCommonConfigFile(
			"endpoint-response.json", "endpointResponse"
		);
	}

	/**
	 * This method builds an object that endpoints can use in their
	 * `serverless-function.json` config file via the
	 * `${endpointRequestTemplate}` variable identifier.
	 *
	 * Note: This method is a helper for, and is called exclusively by, the
	 * {@link Serverless#_createSpecialVariables} method.
	 *
	 * @private
	 * @returns {Object} The endpoint request template.
	 */
	_buildEndpointRequestTemplate() {

		const me = this;

		return {
			"application/vnd.api+json": me._readCommonFile(
				"jsonapi-request-template.txt"
			),
		};
	}

	/**
	 * This method builds an object that endpoints can use in their
	 * `serverless-function.json` config file via the
	 * `${endpointParameterTemplate}` variable identifier.
	 *
	 * Note: This method is a helper for, and is called exclusively by, the
	 * {@link Serverless#_createSpecialVariables} method.
	 *
	 * @private
	 * @param {Object} epDetailsObj - Endpoint details object.
	 * @returns {Object} The endpoint parameter template.
	 */
	_buildEndpointParameterTemplate( epDetailsObj ) {

		const me = this;

		let ret = {};

		// Dependencies
		const _ = me.$dep( "lodash" );

		// Exit early if parameter config is missing...
		if (
			epDetailsObj.parameterConfig === null ||
			!_.isArray( epDetailsObj.parameterConfig )
		) {

			return ret;
		}

		// Build the template object by iterating over each parameter
		// defined in the endpoint's Parameters.json schema file.
		_.each( epDetailsObj.parameterConfig, function ( param ) {

			// Add parameters accepted in the query string
			if ( param.in === "query" ) {

				ret[ param.name ] = "method.request.querystring." + param.name;
			}

			// todo: add parameters that are passed by methods other than the query string
		} );

		// All done
		return ret;
	}
}

module.exports = ServerlessConfigGenerator;
